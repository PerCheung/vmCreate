##设置回调
$!callback.setFileName($tool.append("AllExceptionHandle.java"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/config/exception"))

#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}config.exception;

import cn.dev33.satoken.exception.NotBasicAuthException;
import cn.dev33.satoken.exception.NotLoginException;
import cn.dev33.satoken.exception.NotRoleException;
import #if($tableInfo.savePackageName)$!{tableInfo.savePackageName}.#{end}util.R;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.validation.ValidationException;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static #if($tableInfo.savePackageName)$!{tableInfo.savePackageName}.#{end}config.constant.Constant.PACKAGE_NAME;

/**
 * 全局异常统一处理
 *
 * @author $!author
 * @since $!time.currTime()
 */
@Slf4j
@ControllerAdvice
@ResponseBody
public class AllExceptionHandle {
    /**
     * 登录权限校验异常
     */
    @ExceptionHandler({NotLoginException.class})
    public R unauthorized(Exception e) {
        return R.unauthorized().data(sub(e(e)));
    }

    /**
     * 权限不足
     */
    @ExceptionHandler({NotRoleException.class, NotBasicAuthException.class})
    public R forbidden(Exception e) {
        return R.forbidden().data(sub(e(e)));
    }

    /**
     * 校验传参
     */
    @ExceptionHandler(ValidationException.class)
    public R handleBadRequest(Exception e) {
        return R.badRequest().data(sub(e(e)));
    }

    /**
     * 全局异常处理
     */
    @ExceptionHandler(Exception.class)
    public R exception(Exception e) {
        return R.exp().data(sub(e(e)));
    }

    /**
     * 异常信息处理主体方法
     *
     * @param e 异常对象
     * @return 异常解析信息
     */
    public String e(Exception e) {
        log.error("全局异常处理");
        //打印详细报错日志
        log.error("详细信息如下================================");
        ByteArrayOutputStream printStackTrace = new ByteArrayOutputStream();
        e.printStackTrace(new PrintStream(printStackTrace));
        log.error(String.valueOf(printStackTrace));
        log.error("==========================================");
        //错误信息
        StringBuilder errorMessage = new StringBuilder();
        errorMessage.append(e);
        if (StringUtils.isBlank(e.getMessage())) {
            //处理
            log.error(String.valueOf(errorMessage));
            return String.valueOf(errorMessage);
        }
        StackTraceElement[] stackTrace = e.getStackTrace();
        for (StackTraceElement stackTraceElement : stackTrace) {
            String className = stackTraceElement.getClassName();
            if (className.startsWith(PACKAGE_NAME)) {
                //报错类名称
                String errorName = ";" + stackTraceElement.getClassName();
                errorMessage.append(errorName);
                //报错类行号
                String errorLineNumber = ":" + stackTraceElement.getLineNumber();
                errorMessage.append(errorLineNumber);
                //处理
                log.error(String.valueOf(errorMessage));
                return String.valueOf(errorMessage);
            }
        }
        //处理
        log.error(String.valueOf(errorMessage));
        return String.valueOf(errorMessage);
    }

    /**
     * 字符串截取，只保留错误信息
     */
    private String sub(String error) {
        log.error("进入sub()方法的完整错误信息-" + error);
        String sub = "Exception: ";
        // 查找第一个Exception: 的索引
        int index = error.indexOf(sub);
        if (index != -1) {
            // 使用substring方法截取子字符串
            return error.substring(index + sub.length());
        } else {
            return error;
        }
    }
}