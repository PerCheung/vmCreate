##设置回调
$!callback.setFileName($tool.append("UtilController.java"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/controller"))

#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;

import $!{tableInfo.savePackageName}.service.UtilService;
import $!{tableInfo.savePackageName}.util.R;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.view.RedirectView;

import javax.annotation.Resource;
import javax.validation.constraints.NotNull;

/**
 * 工具对象控制层
 *
 * @author $!author
 * @since $!time.currTime()
 */
@Slf4j
@Validated
@Api(tags = "工具对象")
@RestController
@RequestMapping("api/util")
public class UtilController {
    /**
     * 服务对象
     */
    @Resource
    private UtilService utilService;

    /**
     * 监控内存
     *
     * @return 运行环境信息
     * @throws JsonProcessingException json转化异常
     */
    @ApiOperation("监控内存")
    @GetMapping("monitor")
    public R monitor() throws JsonProcessingException {
        return this.utilService.monitor();
    }

    /**
     * 上传文件
     *
     * @param file 上传的文件
     * @return 上传结果
     */
    @ApiOperation("上传文件")
    @PostMapping("upload")
    public R upload(@ApiParam(value = "文件") @RequestParam("file") @NotNull(message = "文件不允许为空") MultipartFile file) {
        return this.utilService.upload(file);
    }

    /**
     * 下载文件
     *
     * @param id 文件唯一ID
     * @return 文件
     */
    @ApiOperation("下载文件")
    @GetMapping("download/{id}")
    public ResponseEntity<org.springframework.core.io.Resource> downloadFile(@ApiParam(value = "文件唯一ID") @NotNull(message = "文件唯一ID不允许为空") @PathVariable("id") String id) {
        return this.utilService.download(id);
    }

    /**
     * 跳转到传入路径
     */
    @ApiOperation("跳转到传入路径")
    @GetMapping("target")
    public RedirectView redirectToUrl(@ApiParam(value = "传入路径") @NotNull(message = "传入路径不允许为空") String to) {
        return new RedirectView() {{
            setUrl(to);
        }};
    }
}