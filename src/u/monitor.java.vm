##设置回调
$!callback.setFileName($tool.append("MonitorUtil.java"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/util"))

#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}util;

import lombok.extern.slf4j.Slf4j;

import java.lang.management.*;

/**
 * 监控器
 *
 * @author $!author
 * @since $!time.currTime()
 */
@Slf4j
public class MonitorUtil {
    /**
     * 监控内存
     */
    public static void monitor() {
        OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();
        String osName = System.getProperty("os.name");
        String osArch = System.getProperty("os.arch");
        log.info("计算机系统信息：" + osName + " " + osArch);
        log.info("计算机系统版本：" + operatingSystemMXBean.getVersion());
        log.info("计算机CPU核数：" + operatingSystemMXBean.getAvailableProcessors());
        log.info("");

        long memorySize = Runtime.getRuntime().totalMemory();
        long freeMemorySize = Runtime.getRuntime().freeMemory();
        long maxMemory = Runtime.getRuntime().maxMemory();
        log.info("Java虚拟机中的内存总量：" + memorySize / 1024 / 1024 + "MB");
        log.info("Java虚拟机中的可用内存量：" + freeMemorySize / 1024 / 1024 + "MB");
        log.info("Java虚拟机将尝试使用的最大内存量：" + maxMemory / 1024 / 1024 + "MB");
        log.info("");

        MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();
        MemoryUsage heapMemoryUsage = memoryMXBean.getHeapMemoryUsage();
        log.info("Java虚拟机最初向操作系统请求用于堆内存管理的内存量：" + heapMemoryUsage.getInit() / 1024 / 1024 + "MB");
        log.info("Java虚拟机已用堆内存量：" + heapMemoryUsage.getUsed() / 1024 / 1024 + "MB");
        log.info("");

        MemoryUsage nonHeapMemoryUsage = memoryMXBean.getNonHeapMemoryUsage();
        log.info("Java虚拟机最初向操作系统请求用于非堆内存大小：" + nonHeapMemoryUsage.getInit() / 1024 / 1024 + "MB");
        log.info("Java虚拟机已用非堆内存大小：" + nonHeapMemoryUsage.getUsed() / 1024 / 1024 + "MB");
        log.info("");

        ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();
        log.info("Java虚拟机中返回当前活动线程数，包括守护线程和非守护线程：" + threadMXBean.getThreadCount());
        log.info("");

        // 输出系统属性
        System.getProperties().forEach((key, value) -> log.info("\"" + key + "\"" + "=" + "\"" + value + "\""));
        log.info("");
    }
}