##设置回调
$!callback.setFileName($tool.append("IndexController.java"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/mvc/controller"))

#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mvc.controller;

import $!{tableInfo.savePackageName}.mvc.domain.UploadFileObject;
import $!{tableInfo.savePackageName}.mvc.service.IndexService;
import $!{tableInfo.savePackageName}.util.R;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.UrlResource;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;
import javax.validation.constraints.NotNull;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Properties;

import static #if($tableInfo.savePackageName)$!{tableInfo.savePackageName}.#{end}config.exception.AllExceptionHandle.e;

/**
 * 主页控制层
 *
 * @author $!author
 * @since $!time.currTime()
 */
@CrossOrigin(origins = "*", methods = {RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE, RequestMethod.HEAD})
@Slf4j
@RestController
@RequestMapping("api/index")
@Api(tags = "主页")
public class IndexController {
    /**
     * 服务对象
     */
    @Resource
    private IndexService indexService;

    /**
     * 监控内存
     *
     * @return 运行环境信息
     * @throws JsonProcessingException json转化异常
     */
    @ApiOperation("监控内存")
    @GetMapping("monitor")
    public ResponseEntity<R> monitor() throws JsonProcessingException {
        return R.deal(this.indexService.monitor());
    }

    /**
     * 上传文件
     *
     * @param file 上传的文件
     * @return 上传结果
     */
    @ApiOperation("上传文件")
    @PostMapping("upload")
    public ResponseEntity<R> upload(@ApiParam(value = "文件") @RequestParam("file") @NotNull(message = "文件不允许为空") MultipartFile file) {
        return R.deal(this.indexService.upload(file));
    }

    /**
     * 下载文件
     *
     * @param id 文件唯一ID
     * @return 文件
     */
    @ApiOperation("下载文件")
    @GetMapping("download/{id}")
    public ResponseEntity<org.springframework.core.io.Resource> downloadFile(@ApiParam(value = "文件唯一ID") @NotNull(message = "文件唯一ID不允许为空") @PathVariable("id") String id) {
        Properties props = System.getProperties();
        // 根路径
        String rootPath = props.getProperty("user.dir");
        // 分隔符
        String separator = props.getProperty("file.separator");
        // 文件路径
        String folderPath = rootPath + separator + "file" + separator + id;
        // 文件参数
        UploadFileObject uploadFileObject = new UploadFileObject();
        // 解析文件路径
        Path filePath = Paths.get(folderPath).resolve(uploadFileObject.getOriginalFilename()).normalize();
        try {
            // 加载文件资源
            org.springframework.core.io.Resource resource = new UrlResource(filePath.toUri());

            if (resource.exists()) {
                // 设置响应头
                HttpHeaders headers = new HttpHeaders();
                ContentDisposition contentDisposition = ContentDisposition.builder("attachment").filename(uploadFileObject.getOriginalFilename(), StandardCharsets.UTF_8).build();
                headers.setContentDisposition(contentDisposition);
                headers.add(HttpHeaders.CONTENT_TYPE, uploadFileObject.getContentType());
                headers.setContentLength(uploadFileObject.getSize());

                // 返回文件内容
                return ResponseEntity.ok().headers(headers).body(resource);
            } else {
                // 文件不存在时返回 404 错误
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            log.error("下载文件报错");
            e(e);
            return ResponseEntity.internalServerError().build();
        }
    }
}