##设置回调
$!callback.setFileName($tool.append("AllExceptionHandle.java"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/config/exception"))

#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}config.exception;

import #if($tableInfo.savePackageName)$!{tableInfo.savePackageName}.#{end}util.ErrorPrintUtil;
import #if($tableInfo.savePackageName)$!{tableInfo.savePackageName}.#{end}util.R;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import javax.validation.ValidationException;

import static #if($tableInfo.savePackageName)$!{tableInfo.savePackageName}.#{end}config.constant.Constant.PACKAGE_NAME;

/**
 * 全局异常统一处理
 *
 * @author $!author
 * @since $!time.currTime()
 */
@Slf4j
@ControllerAdvice
@ResponseBody
public class AllExceptionHandle {
    /**
     * 校验传参
     */
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(ValidationException.class)
    public R handleBadRequest(Exception e) {
        return R.badRequest().data(e(e));
    }

    /**
     * 全局异常处理
     */
    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public R exception(Exception e) {
        return R.exp().data(e(e));
    }

    /**
     * 异常信息处理主体方法
     * @param e 异常对象
     * @return 异常解析信息
     */
    private String e(Exception e) {
        ErrorPrintUtil.print(e);
        //错误信息
        StringBuffer errorMessage = new StringBuffer();
        String error = StringUtils.isNotBlank(e.getMessage()) ? e.getMessage() : e.toString();
        errorMessage.append(error);
        StackTraceElement[] stackTrace = e.getStackTrace();
        for (StackTraceElement stackTraceElement : stackTrace) {
            String className = stackTraceElement.getClassName();
            if (className.startsWith(PACKAGE_NAME)) {
                String errorName = ";" + stackTraceElement.getClassName();
                errorMessage.append(errorName);
                String errorLineNumber = ":" + stackTraceElement.getLineNumber();
                errorMessage.append(errorLineNumber);
                ErrorPrintUtil.print(errorMessage);
                return errorMessage.toString();
            }
        }
        ErrorPrintUtil.print(errorMessage);
        return errorMessage.toString();
    }
}