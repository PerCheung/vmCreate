##设置回调
$!callback.setFileName($tool.append("AccessFilter.java"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/config/filter"))

#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}config.filter;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.stream.Stream;

/**
 * 提供跨域支持
 *
 * @author $!author
 * @since $!time.currTime()
 */
@Slf4j
@Configuration
public class AccessFilter implements Filter {
    /**
     * 跨域允许的方法
     */
    private static String METHODS = "";

    //使用Stream流将HttpMethod中的方法常量赋予METHODS
    static {
        Stream.of(HttpMethod.values()).forEach(o -> {
            if (StringUtils.isBlank(METHODS)) {
                METHODS = String.valueOf(o);
            } else {
                METHODS += ", " + o;
            }
        });
    }

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {

    }

    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
        HttpServletRequest request = (HttpServletRequest) req;
        HttpServletResponse response = (HttpServletResponse) res;
        response.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, "*");
        response.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, METHODS);
        response.setHeader(HttpHeaders.ACCESS_CONTROL_MAX_AGE, "3600");
        response.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, "*");
        //跨域时会首先发送一个option请求，这里我们给option请求直接返回正常状态
        if (request.getMethod().equals(HttpMethod.OPTIONS.name())) {
            response.setStatus(HttpStatus.OK.value());
            return;
        }
        chain.doFilter(req, res);
    }

    @Override
    public void destroy() {

    }
}
