##设置回调
$!callback.setFileName($tool.append("application-dev.yaml"))
$!callback.setSavePath($tool.append($modulePath, "/src/main/resources"))
server:
  port: 8081

# Sa-Token 配置 (文档: https://sa-token.cc)
sa-token:
  # token 名称（同时也是 cookie 名称）
  token-name: satoken
  # token 有效期（单位：秒） 默认30天，-1 代表永久有效，当前设置90天
  timeout: 7776000
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: -1
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: false
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: simple-uuid
  # 是否输出操作日志
  is-log: true
  # 是否尝试从 cookie 里读取 Token，此值为 false 后，StpUtil.login(id) 登录时也不会再往前端注入Cookie
  isReadCookie: false
  # 是否尝试从 请求体 里读取 Token
  isReadBody: false

swagger:
  enabled: true

spring:
  # Redis配置
  redis:
    host: localhost
    port: 6379
    password:
    # 操作0号数据库，默认有16个数据库
    database: 0
    lettuce:
      pool:
        # 最大连接数
        max-active: 500
        # 连接池最大阻塞等待时间
        max-wait: 1000ms
        # 连接池中的最大空闲连接
        max-idle: 100
        # 连接池中的最小空闲连接
        min-idle: 0
  # 配置文件上传大小限制
  servlet:
    multipart:
      max-file-size: 200MB
      max-request-size: 200MB
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initial-size: 15
      min-idle: 8
      max-active: 30
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 60
      validation-query: SELECT 1 FROM DUAL
      # useUnicode是否使用Unicode字符集
      # characterEncoding 当useUnicode设置为true时，指定字符编码
      # serverTimezone 时区
      # allowMultiQueries 是否允许执行多行sql
      # connectTimeout 和数据库服务器建立socket连接时的超时，单位：毫秒, 0表示永不超时
      # socketTimeout 操作（读写）超时，单位：毫秒,0表示永不超时
      url: jdbc:mysql://localhost:3306/learn?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowMultiQueries=true&connectTimeout=60000&socketTimeout=60000
      username: root
      password: root
      driver-class-name: com.mysql.cj.jdbc.Driver

mybatis:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    # call-setters-on-nulls 参数的作用是查询的某一行某一列为null，是否返回
    call-setters-on-nulls: true
    # 禁用二级缓存
    # cache-enabled: false
    # 一级缓存指定为statement级别 效果为禁用一级缓存
    # local-cache-scope: statement
    # 日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

pagehelper:
  # 默认值false，当值为true时，pageSize=0或者RowBounds.limit=0查询全部结果（相当于没有执行分页查询，但是返回结果仍然是Page类型）
  page-size-zero: true
  # 指定数据库，可以不配置，pagehelper插件会自动检测数据库的类型
  helperDialect: mysql
  # 分页合理化参数默认false，当该参数设置为true 时，pageNum <= 0 时，默认显示第一页，pageNum 超过 pageSize 时，显示最后一页
  reasonable: true
  # 分页插件会根据查询方法的参数中，自动根据params配置的字段中取值，找到合适的值会自动分页
  supportMethodsArguments: true
  # 为了支持 startPage(Object params) 方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值，可以配置 pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值
  params: count=countSql